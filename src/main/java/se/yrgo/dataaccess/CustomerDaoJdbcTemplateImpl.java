package se.yrgo.dataaccess;

import org.springframework.dao.EmptyResultDataAccessException;
import se.yrgo.domain.Call;
import se.yrgo.domain.Customer;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private final JdbcTemplate jdbcTemplate;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void createTables() {
        //ta bort call_log den beroende påp customer
        jdbcTemplate.execute("""
                    DROP TABLE IF EXISTS call_log;
                    DROP TABLE IF EXISTS customer;
                    CREATE TABLE customer (
                        customerId VARCHAR(255) PRIMARY KEY,
                        companyName VARCHAR(255),
                        email VARCHAR(255),
                        telephone VARCHAR(255),
                        notes VARCHAR(200)
                    )
                """);

        jdbcTemplate.execute("""
                    CREATE TABLE call_log (
                        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        customerId VARCHAR(255),
                        callDetail VARCHAR(1000),
                        timeAndDate TIMESTAMP,
                        FOREIGN KEY (customerId) REFERENCES customer(customerId)
                    )
                """);
    }

    @Override
    public void create(Customer customer) {
        jdbcTemplate.update(
                "INSERT INTO customer (customerId, companyName, email, telephone, notes) VALUES (?, ?, ?, ?, ?)",
                customer.getCustomerId(),
                customer.getCompanyName(),
                customer.getEmail(),
                customer.getTelephone(),
                customer.getNotes()
        );
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        String sql = "SELECT * FROM customer WHERE customerId = ?";

        try {
            return jdbcTemplate.queryForObject(
                    sql,
                    new Object[]{customerId},
                    new CustomerRowMapper()
            );
        } catch (EmptyResultDataAccessException e) {
            throw new RecordNotFoundException("Customer with ID " + customerId + " not found.");
        } catch (Exception e) {
            // Hantera andra oväntade fel
            throw new RuntimeException("An error occurred while fetching the customer: " + e.getMessage(), e);
        }
    }

    public List<Customer> getByName(String name) {
        String sql = "SELECT * FROM customer WHERE companyName LIKE ?";
        return jdbcTemplate.query(sql, new Object[]{"%" + name + "%"}, new CustomerRowMapper());
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        String sql = "UPDATE customer SET companyName = ?, email = ?, telephone = ?, notes = ? WHERE customerId = ?";

        int rowsUpdated = jdbcTemplate.update(sql,
                customerToUpdate.getCompanyName(),
                customerToUpdate.getEmail(),
                customerToUpdate.getTelephone(),
                customerToUpdate.getNotes(),
                customerToUpdate.getCustomerId());

        if (rowsUpdated == 0) {
            throw new RecordNotFoundException("Customer with ID " + customerToUpdate.getCustomerId() + " not found.");
        }
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        String sql = "DELETE FROM customer WHERE customerId = ?";

        int rowsDeleted = jdbcTemplate.update(sql, oldCustomer.getCustomerId());

        if (rowsDeleted == 0) {
            throw new RecordNotFoundException("Customer with ID " + oldCustomer.getCustomerId() + " not found.");
        }
    }

    @Override
    public List<Customer> getAllCustomers() {
        String sql = "SELECT * FROM customer";
        return jdbcTemplate.query(sql, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        String sql = "SELECT * FROM customer WHERE customerId = ?";
        try {
            Customer customer = jdbcTemplate.queryForObject(
                    sql,
                    new Object[]{customerId},
                    new CustomerRowMapper()
            );

            String callSql = "SELECT * FROM call WHERE customerId = ?";
            List<Call> calls = jdbcTemplate.query(callSql, new Object[]{customerId}, new CallRowMapper());
            if (customer != null) {
                customer.setCalls(calls);
            }

            return customer;
        } catch (EmptyResultDataAccessException e) {
            throw new RecordNotFoundException("Customer with ID " + customerId + " not found.");
        }
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        String sql = "INSERT INTO call_log (customerId, callDetail, timeAndDate) VALUES (?, ?, ?)";
        int rowsAffected = jdbcTemplate.update(
                sql,
                customerId,
                newCall.getNotes(),
                newCall.getTimeAndDate()
        );

        if (rowsAffected == 0) {
            throw new RecordNotFoundException("Customer with ID " + customerId + " not found, unable to add call.");
        }
    }

    private static class CustomerRowMapper implements RowMapper<Customer> {
        @Override
        public Customer mapRow(ResultSet rs, int rowNum) throws SQLException {
            Customer customer = new Customer();
            customer.setCustomerId(rs.getString("customerId"));
            customer.setCompanyName(rs.getString("companyName"));
            customer.setEmail(rs.getString("email"));
            customer.setTelephone(rs.getString("telephone"));
            customer.setNotes(rs.getString("notes"));
            return customer;
        }
    }

    private static class CallRowMapper implements RowMapper<Call> {
        @Override
        public Call mapRow(ResultSet rs, int rowNum) throws SQLException {
            Call call = new Call(rs.getString("callDetail"));
            call.setTimeAndDate(rs.getTimestamp("timeAndDate").toLocalDateTime());
            return call;
        }
    }

}
